	// 一：课程总述
	// 这是一门讲解，网络通讯和架构为主的实战课
	// 网络通讯：写自己能够驾驭的网络通讯代码来实现具体的网络通讯功能
	// 架构：架构师
	// 架构师的责任：负责产品/软件的总体规划设计，把掌握的技术整和/融合，从而构成一个产品
	// 实战：学具备商业质量的代码：学些好nginx(web服务器),里面最精彩，最核心的代码


	// 配置固定ip地址
	// 修改配置文件 vim /etc/network/
	// sudo apt-get install build-essential
	// samba服务：不采用
	// 通过虚拟机，把一个windows下的目录共享。让linux可以访问这个目录



	// 一：nginx简介
	// ngxin(2002年开发，2004年10月才出现第一个版本0.1.0)：web服务器，市场份额第二，Apache第一
	// web服务器，反向代理，负载均衡，邮件代理；运行时需要的系统资源比较少，所以经常被称呼为轻量级服务器。
	// 是一个俄罗斯人，纯C开发，并且开源了
	// nginx号称并发处理百万级别的TCP连接，非常稳定，热部署（运行的时候能升级），高度模块化设计，自由许可证。
	// 很多人开发自己的模块来增强nginx，第三方业务模块(c++开发)
	// Linux epoll技术； windows ICOP

	// 二：为什么选择nginx
	// 单机10万并发，而且同时能够保持高效的服务，epoll这种高并发的好处就是：高并发只是占用更多的内存就能做到！
	// 内存池，进程池，线程池，事件驱动等
	// 学习研究大师级人物写的代码，是一个程序开发人员能够急速进步的最佳途径！


	// 三：安装nginx，代建web服务器
	// (3.1) 安装前提
	// a）epoll，linux内核版本为2.6或者以上;
	// b）gcc编译器，g++编译器
	// c) pcre库：函数库，支持解析正则表达式
	// d）zlib库：压缩解压缩功能
	// e) openssl库：ssl功能相关库，用于网站加密通讯

	// (3.2) nginx源码下载以及目录结构简单认识
	// nginx官网 http://www.nginx.org
	// nginx的几种版本
	// (1)mainline版本：版本号中间数字一般为奇数，更新快，最新功能，bug修复，稳定性差一点。
	// (2)stale版本：稳定版，版本号中间数字一般为偶数，稳定性强，更新慢，更适合商用。
	// (3)Legacy版本：遗留版本，以往的老版本。
	// 安装，现在有这种二进制版本：通过命令行直接安装
	// 灵活：通过编译nginx源码，http://nginx.org/download/nginx-1.22.0.tar.gz

	// auto/:编译相关的脚本，可执行文件configure会用到这些脚本
	// cc/:检查编译器的脚本
	// lib/:检查依赖库的脚本
	// os/:检查操作系统类型的脚本
	// type/:检查平台类型的脚本
	// CHANGES:修复的bug，新增加的功能说明
	// CHANGES.ru:俄语版
	// conf/:默认的配置文件
	// configure:编译nginx之前必须先执行脚本以生成一些必要的中间文件
	// contrib/:脚本和工具，典型的是vim高亮工具:vim/:vim高亮工具
	// html/:欢迎界面和错误界面相关的html文件
	// man/:nginx帮助文件目录
	// src/:nginx源码目录：
	// core:核心代码
		// event:（事件）模块相关代码
		// http:（web服务）相关模块代码
		// mail:邮件模块相关代码
		// os:操作系统相关代码
		// stream:流处理相关代码


	// (3.3) nginx的编译和安装
	// a)编译的第一步：configure来进行编译之前的配置工作
	//--prefix:指定最终安装到的目录：默认值:usr/local/nginx
	//--sbin-path:指定可执行文件目录，默认：sbin/nginx
	//--conf-path:用来指定配置文件目录，默认：conf/nginx.conf
	// 执行configure生成的objs中间文件目录：
		// ngx_modules.c:决定了编译nginx的时候会有哪些模块会被编译进来
		// Makefile:编译规则文件
		// b)用make来编译，生成了可执行文件
		// c)用make命令开始安装 sudo make install

	// (3.4) nginx的启动和简单实用
	// 启动：sudo ./nginx

	// 一：nginx的整体结构
	// (1.1):master进程和worker进程概览
	// 启动nginx后，有一个master进程和worker进程
	// UID：进程所属的用户ID， PID：进程ID，PPID：父进程ID。fork()，worker进程由master进程使用fork()创建出来，master进程是worker进程的父进程。


	// (1.2):nginx进程模型
	// 1个maser进程，1到多个worker进程，这种工作机制对外服务；这种工作机制是nginx能够稳定，灵活的运行
	// a)master进程责任：监控进程，不处理具体业务，专门用来管理和监控worker进程，
	// b)worker进程：用来干主要的获得，（和用户交互）
	// c)master进行和worker进程之间要通信，可以用信号，也可以用共享内存
	// d)稳定性，灵活性，体现之一：worker进程一旦挂掉，master进程会立即fork()一个worker进程
	
	// (1.3)调整worker进程数量
	// worker进程几个合适呢？公认的做法：多核计算机，就让每个worker运行在一个单独的内核上，最大限度减少CPU进程切换成本
	
	// 二：nginx进程模型细说
	// 稳定，灵活
	// (2.1)sudo ./nginx -s reload	
	// (2.2)nginx热升级，热回滚
	// (2.3)sudo ./nginx -s stop(立即停止) -quit(优雅的退出)
	// nginx采用多进程模型，而多线程模型共享内存，如果某个线程报错，一定会影响到其它线程，最终会导致整个服务器崩溃


终端与进程的关系
    （2.1）终端与bash进程
    ps -ef | grep bash
    pts（虚拟终端），每连接一个虚拟终端到linux操作系统，就会出现一个bash进程（shell），用于解释用户输入的命令



